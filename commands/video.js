const axios = require('axios');
const yts = require('yt-search');


const izumi = {
    baseURL: "https://izumiiiiiiii.dpdns.org"
};

async function videoCommand(sock, chatId, message) {
    try {
        const text = message.message?.conversation || message.message?.extendedTextMessage?.text;
        const searchQuery = text.split(' ').slice(1).join(' ').trim();

        if (!searchQuery) {
            await sock.sendMessage(chatId, {
                text: "üé• *Usage:* `.video <video name or url>`\nüí° Example: `.video despacito`"
                
            }, { quoted: message });
            return;
        }

        let videoUrl = '';
        let videoInfo = null;

        if (searchQuery.startsWith('http://') || searchQuery.startsWith('https://')) {
            videoUrl = searchQuery;
            const { videos } = await yts(videoUrl);
            videoInfo = videos ? videos[0] : null;
        } else {
            const { videos } = await yts(searchQuery);
            if (!videos || videos.length === 0) {
                await sock.sendMessage(chatId, { text: "‚ùå No videos found!" }, { quoted: message });
                return;
            }
            videoInfo = videos[0];
            videoUrl = videoInfo.url;
        }

        const videoCaption =
            `‚ï≠‚îÄ‚îÄ‚îÄ„Äé üé¨ *·¥†…™·¥Ö·¥á·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä* „Äè‚îÄ‚îÄ\n` +
            `‚îÇ üìÄ Title: ${videoInfo?.title || "Unknown"}\n` +
            `‚îÇ ‚è±Ô∏è Duration: ${videoInfo?.timestamp || "Unknown"}\n` +
            `‚îÇ üëÅÔ∏è Views: ${videoInfo?.views?.toLocaleString() || "Unknown"}\n` +
            `‚îÇ üåç Published: ${videoInfo?.ago || "Unknown"}\n` +
            `‚îÇ üë§ Author: ${videoInfo?.author?.name || "Unknown"}\n` +
            `‚îÇ üîó URL: ${videoUrl}\n` +
            `‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n` +
            `‚ï≠‚îÄ‚îÄ‚îÄ‚åØ Choose Type ‚åØ‚îÄ‚îÄ‚îÄ\n` +
            `‚îÇ 1Ô∏è‚É£ üé¨ Play (Video)\n` +
            `‚îÇ 2Ô∏è‚É£ üìÅ Save (Document)\n` +
            `‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n` +
            `> Powered by Lucky Tech Hub`;

        const sentMsg = await sock.sendMessage(chatId, {
            image: { url: videoInfo?.thumbnail },
            caption: videoCaption
            
        }, { quoted: message });

        // Fetch video via Izumi API
        const apiUrl = `${izumi.baseURL}/downloader/youtube?url=${encodeURIComponent(videoUrl)}&format=720`;
        const res = await axios.get(apiUrl, { timeout: 30000 });
        if (!res.data || !res.data.result || !res.data.result.download) {
            throw new Error("Izumi API failed to return a valid video link.");
        }
        const videoData = res.data.result;

        // ‚úÖ Multi-reply handler
        const messageID = sentMsg.key.id;
        const handler = async (msgData) => {
            try {
                const rMsg = msgData.messages[0];
                if (!rMsg?.message) return;

                const body = rMsg.message.conversation || rMsg.message.extendedTextMessage?.text;
                if (!body) return;

                const choice = body.trim();
                const isReply = rMsg.message.extendedTextMessage?.contextInfo?.stanzaId === messageID;

                if (isReply && (choice === "1" || choice === "2")) {
                    if (choice === "1") {
                        await sock.sendMessage(chatId, {
                            video: { url: videoData.download },
                            mimetype: "video/mp4",
                            fileName: `${videoData.title || "video"}.mp4`,
                            caption: `‚ñ∂Ô∏è *Now Playing:* ${videoData.title || "Video"}`
                            
                        }, { quoted: rMsg });
                    } else if (choice === "2") {
                        await sock.sendMessage(chatId, {
                            document: { url: videoData.download },
                            mimetype: "video/mp4",
                            fileName: `${videoData.title || "video"}.mp4`,
                            caption: `üíæ *Saved:* ${videoData.title || "Video"}`
                            
                        }, { quoted: rMsg });
                    }

                    // React each time ‚úÖ
                    await sock.sendMessage(chatId, {
                        react: { text: '‚úÖ', key: rMsg.key }
                    });
                }
            } catch (err) {
                console.error("Reply handler error:", err);
            }
        };

        sock.ev.on("messages.upsert", handler);

        // ‚è≥ Keep session alive for 5 minutes (multiple replies allowed)
        setTimeout(() => sock.ev.off("messages.upsert", handler), 5 * 60 * 1000);

    } catch (error) {
        console.error("[VIDEO] Command Error:", error?.message || error);
        await sock.sendMessage(chatId, { text: "‚ùå Download failed: " + (error?.message || "Unknown error") }, { quoted: message });
    }
}

module.exports = videoCommand;
